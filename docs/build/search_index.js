var documenterSearchIndex = {"docs":
[{"location":"HCA/#Hierarchical-Cluster-Analysis-(HCA)","page":"HCA","title":"Hierarchical Cluster Analysis (HCA)","text":"","category":"section"},{"location":"HCA/#Introduction","page":"HCA","title":"Introduction","text":"","category":"section"},{"location":"HCA/","page":"HCA","title":"HCA","text":"The HCA is an unsupervised clustering approach mainly based on the distances of the measurements from each other. It is an agglomerative approach, thus starting with each individual measurement as a cluster and then grouping them to build a final cluster that includes all the measurements.   ","category":"page"},{"location":"HCA/#How?","page":"HCA","title":"How?","text":"","category":"section"},{"location":"HCA/","page":"HCA","title":"HCA","text":"The approach taken in HCA is very simple from programming point of view. The algorithm starts with the assumption that every individual measurement is a unique cluster. Then it calculates the pairwise distances between the measurements. The two measurements with the smallest distance are grouped together to form the first agglomerative cluster. In the next iteration, the newly generated cluster is then represented by either its mean, minimum or its maximum for the distance calculations. It should be noted that there are several ways to calculate the distance between two measurements (e.g. Euclidean distance and Mahalanobis distance). For simplicity, we are only going to look at the \"Euclidean distance\" here.   ","category":"page"},{"location":"HCA/","page":"HCA","title":"HCA","text":"In a one dimensional space, the distance between points x_n and x_m is calculated by subtracting the two points from each other.","category":"page"},{"location":"HCA/","page":"HCA","title":"HCA","text":"\nd_mn = x_n - x_m\n","category":"page"},{"location":"HCA/","page":"HCA","title":"HCA","text":"Assuming the below dataset with vectors X and Y as the coordinates. ","category":"page"},{"location":"HCA/","page":"HCA","title":"HCA","text":"using AdvChemStat\n\n# Generating the data\n\ncx1 = 1 .+ (2-1) .* rand(5) # 5 random values between 1 and 2 \nc1 = 5 .* rand(5)           # 5 random values around 5\ncx2 = 4 .+ (6-4) .* rand(5) # 5 random values between 4 and 6\nc2 = 10 .* rand(5)          # 5 random values around 10\n\nY = vcat(c1[:],c2[:])       # building matrix Y\nX = vcat(cx1[:],cx2[:])     # building the matrix X\n\n# Plotting the data\nscatter(cx1,c1,label = \"Cluster 1\")\nscatter!(cx2,c2,label = \"Cluster 2\")\nxlabel!(\"X\")\nylabel!(\"Y\")\n","category":"page"},{"location":"HCA/","page":"HCA","title":"HCA","text":"We first plot the data in the one dimensional data. In other words, we are setting the y values to zero in our data matrix. Below you can see how this is done.","category":"page"},{"location":"HCA/","page":"HCA","title":"HCA","text":"using AdvChemStat\n\n# Plotting the data\n\nscatter(X,zeros(length(X[:])),label = \"Data\")\n\nxlabel!(\"X\")\nylabel!(\"Y\")\n","category":"page"},{"location":"HCA/","page":"HCA","title":"HCA","text":"The next step is to calculate the distances in the x domain. For that we are using the Euclidean distances. Here we need to calculate the distance between each point in the X and all the other values in the same matrix. This implies that we will end up with a square distance matrix (i.e. dist). The dist matrix has a zero diagonal, given that the values on the diagonal represent the distance between each point and itself. Also it is important to note that we are interested only in the magnitude of the distance but not its direction. Thus, you can use the abs.(-) to convert all the distances to their absolute values. Below you can see an example of a function for these calculations.","category":"page"},{"location":"HCA/","page":"HCA","title":"HCA","text":"using AdvChemStat\n\nfunction dist_calc(data)\n\n    dist = zeros(size(data,1),size(data,1))      # A square matrix is initiated \n\tfor i = 1:size(data,1)-1                     # The nested loops create two unaligned vectors by one member\n\t\tfor j = i+1:size(data,1)\n\t\t\tdist[j,i] = data[j,1] - data[i,1]    # The generated vectors are subtracted from each other \n\t\tend\n\tend\n\n\tdist += dist'                                # The upper diagonal is filled \n\treturn abs.(dist)                            # Make sure the order of subtraction does not affect the distances\n\nend \n\ndist = dist_calc(X)\n","category":"page"},{"location":"HCA/","page":"HCA","title":"HCA","text":"In the next step we need to find the points in the X that have the smallest distance and should be grouped together as the first cluster. To do so we need to use the dist matrix. However, as you see in the dist matrix the smallest values are zero and are found in the diagonal. A way to deal with this is to set the diagonal to for example to Inf. ","category":"page"},{"location":"HCA/","page":"HCA","title":"HCA","text":"using AdvChemStat\n\n#dist = dist_calc(X) \ndist[diagind(dist)] .= Inf                   # Set the diagonal to inf, which is very helpful when searching for minimum distance\ndist\n","category":"page"},{"location":"HCA/","page":"HCA","title":"HCA","text":"Now that we have the complete distances matrix, we can use the function argmin(-) to find the coordinates of the points with the minimum distance in the X. ","category":"page"},{"location":"HCA/","page":"HCA","title":"HCA","text":"using AdvChemStat\n\ncl_temp = argmin(dist)\n","category":"page"},{"location":"HCA/","page":"HCA","title":"HCA","text":"The selected points in the X are the closest to each other, indicating that they should be grouped into one cluster. In the next step, we will assume this cluster as a single point and thus we can repeat the distance calculations. For simplicity, we assume that the average of the two points is representative of that cluster. This process is called linkage and can be done using different approaches. Using the mean, in particular, is called centroid linkage. With centroid method, we are replacing these points with their average. This process can be repeated until all data points are grouped into one single cluster.","category":"page"},{"location":"HCA/","page":"HCA","title":"HCA","text":"using AdvChemStat\n\nX1 = deepcopy(X)\nX1[cl_temp[1]] = mean([X[cl_temp[1]],X[cl_temp[2]]])\nX1[cl_temp[2]] = mean([X[cl_temp[1]],X[cl_temp[2]]])\n\n[X,X1]\n\n","category":"page"},{"location":"HCA/","page":"HCA","title":"HCA","text":"using AdvChemStat\n\n\nscatter(X,zeros(length(X[:])),label = \"Original data\")\nscatter!(X1,0.01 .* ones(length(X1[:])),label = \"Data after clustering\",fillalpha = 0.5)\nylims!(-0.01,0.1)\nxlabel!(\"X\")\nylabel!(\"Y\")\n\n","category":"page"},{"location":"HCA/","page":"HCA","title":"HCA","text":"So far, we have done all our calculations based on one dimensional data. Now we can move towards two and more dimension. One of the main things to consider when increasing the number of dimensions is the distance calculations. In the above examples, we have use the Euclidean distance, which is one of many distance metrics. In general terms the Euclidean distance can be expressed as below, where d_mn represents the distance between points m and n. This is based on the Pythagorean distance. ","category":"page"},{"location":"HCA/","page":"HCA","title":"HCA","text":"d_mn = sqrtsum(x_m - x_n)^2\n","category":"page"},{"location":"HCA/","page":"HCA","title":"HCA","text":"Let's try to move to a two dimensional space rather than uni-dimensional one. ","category":"page"},{"location":"HCA/","page":"HCA","title":"HCA","text":"using AdvChemStat\n\n# Plotting the data\nscatter(cx1,c1,label = \"Cluster 1\")\nscatter!(cx2,c2,label = \"Cluster 2\")\nxlabel!(\"X\")\nylabel!(\"Y\")\n","category":"page"},{"location":"HCA/","page":"HCA","title":"HCA","text":"The very first step to do so is to convert our 1D distances to 2D ones, using the below equation. If we replace the distji = dataj1 - datai1 with the below equation in our distance function, we will be able to generate the distance matrix for our two dimensional dataset. ","category":"page"},{"location":"HCA/","page":"HCA","title":"HCA","text":"d_mn = sqrt(x_m - x_n)^2 + (y_m - y_n)^2\n","category":"page"},{"location":"HCA/","page":"HCA","title":"HCA","text":"using AdvChemStat\n\nfunction dist_calc(data)\n\n    dist = zeros(size(data,1),size(data,1))      # A square matrix is initiated \n\tfor i = 1:size(data,1)-1                     # The nested loops create two unaligned vectors by one member\n\t\tfor j = i+1:size(data,1)\n\t\t\tdist[j,i] = sqrt(sum((data[i,:] .- data[j,:]).^2))    # The generated vectors are subtracted from each other \n\t\tend\n\tend\n\n\tdist += dist'                                # The upper diagonal is filled \n\treturn abs.(dist)                            # Make sure the order of subtraction does not affect the distances\n\nend \n\ndata = hcat(X,Y)\t\t\t\t\t\t\t\t# To generate the DATA matrix\n\ndist = dist_calc(data) \t\t\t\t\t\t\t# Calculating the distance matrix\ndist[diagind(dist)] .= Inf                   # Set the diagonal to inf, which is very helpful when searching for minimum distance\ndist\n","category":"page"},{"location":"HCA/","page":"HCA","title":"HCA","text":"using AdvChemStat\n\ncl_temp = argmin(dist)\n\ndata1 = deepcopy(data)\n\ndata1[cl_temp[1],1] = mean([data[cl_temp[1],1],data[cl_temp[2],1]])\ndata1[cl_temp[1],2] = mean([data[cl_temp[1],2],data[cl_temp[2],2]])\ndata1[cl_temp[2],1] = mean([data[cl_temp[1],1],data[cl_temp[2],1]])\ndata1[cl_temp[2],2] = mean([data[cl_temp[1],2],data[cl_temp[2],2]])\n\ndata1\n","category":"page"},{"location":"HCA/","page":"HCA","title":"HCA","text":"using AdvChemStat\n\nscatter(data[:,1],data[:,2],label = \"Original data\")\nscatter!(data1[:,1],data1[:,2],label = \"Data after clustering\")\nxlabel!(\"X\")\nylabel!(\"Y\")\n\n","category":"page"},{"location":"HCA/","page":"HCA","title":"HCA","text":"As it can be seen in the figure, there are two blue points and one red point in the middle of those points. These blue dots represent the two closest data points that are clustered together to form the centroid in between them. If we repeat this process multiple times, we eventually end up having all data points into one large cluster. The HCA clustering generates an array of clustered data points that can be visualized via a dendrogram or a heatmap. ","category":"page"},{"location":"HCA/","page":"HCA","title":"HCA","text":"using AdvChemStat\n\ndist = dist_calc(data) \n\nhc = hclust(dist, linkage=:average)\nsp.plot(hc)\n","category":"page"},{"location":"HCA/#Practical-Application","page":"HCA","title":"Practical Application","text":"","category":"section"},{"location":"HCA/","page":"HCA","title":"HCA","text":"We can use either our home developed function for HCA or use the julia built-in functions. Here we will provide an easy tutorial on how to use the julia functions that are built-in the AdvChemStat.jl package. ","category":"page"},{"location":"HCA/","page":"HCA","title":"HCA","text":"For calculating the distances the function pairwise(-) via the julia package Distances.jl can be used. Function pairwise(-) has three inputs namely: 1) distance metrics, 2) data, and 3) the operation direction. This function outputs a square matrix similar to our distance matrix. As it can be seen from the distance matrix, our function and the pairwise(-) generate the same results, which is expected. The function pairwise(-) will give access to a wide variety of distance metrics that can be used for your projects. ","category":"page"},{"location":"HCA/","page":"HCA","title":"HCA","text":"using AdvChemStat\n\ndist1 = pairwise(AdvChemStat.Euclidean(), data, dims=1) # Euclidean distance \n\n# dist1 = pairwise(AdvChemStat.TotalVariation(), data, dims=1) # TotalVariation distance \n","category":"page"},{"location":"HCA/","page":"HCA","title":"HCA","text":"For the HCA itself, you can use the function hclust(-) incorporated in the AdvChemStat.jl package and provided via Clustering.jl package. This function takes two inputs, the distance matrix and the linkage method. The output of this function is a structure with four outputs. The two most important outputs are merges and order. The combination of all four outputs can be plotted via sp.plot(-) function. ","category":"page"},{"location":"HCA/","page":"HCA","title":"HCA","text":"using AdvChemStat\n\nh = hclust(dist1,:average) # Average linkage or centroids \n","category":"page"},{"location":"HCA/","page":"HCA","title":"HCA","text":"To access the outputs, one can do the following: ","category":"page"},{"location":"HCA/","page":"HCA","title":"HCA","text":"using AdvChemStat\n\nh.order \n","category":"page"},{"location":"HCA/","page":"HCA","title":"HCA","text":"and to plot the outputs, we can use the below function.","category":"page"},{"location":"HCA/","page":"HCA","title":"HCA","text":"using AdvChemStat\n\nsp.plot(h)\n","category":"page"},{"location":"HCA/","page":"HCA","title":"HCA","text":"There are also python implementation of HCA, that you can explore using those for your analysis. ","category":"page"},{"location":"HCA/#Additional-Example","page":"HCA","title":"Additional Example","text":"","category":"section"},{"location":"HCA/","page":"HCA","title":"HCA","text":"If you are interested in practicing more, you can use the mtcars dataset via RDatasets provided in folder dataset of the package AdvChemStat.jl github repository. Please note that you must exclude the car origin column. The objective here is to see whether HCA is able to cluster the cars with similar origins.  ","category":"page"},{"location":"HCA/","page":"HCA","title":"HCA","text":"If you are interested in additional resources regarding HCA and would like to know more you can check this MIT course material.  ","category":"page"},{"location":"svd/#Singular-Value-Decomposition-(SVD)","page":"SVD","title":"Singular Value Decomposition (SVD)","text":"","category":"section"},{"location":"svd/#Introduction","page":"SVD","title":"Introduction","text":"","category":"section"},{"location":"svd/","page":"SVD","title":"SVD","text":"The SVD is a matrix factorization technique that decomposes any matrix to a unique set of matrices. The SVD is used for dimension reduction, trend analysis, and potentially for the clustering of a multivariate dataset. SVD is an exploratory approach to the data analysis and therefore it is an unsupervised approach. In other words, you will only need the X block matrix. However, where the Y matrix/vector is available, it (i.e. Y) can be used for building composite models or assess the quality of the clustering. ","category":"page"},{"location":"svd/#How?","page":"SVD","title":"How?","text":"","category":"section"},{"location":"svd/","page":"SVD","title":"SVD","text":"In SVD the matrix X_m times n is decomposed into the matrices U_m times n, D_n times n, and V_n times n^T. The matrix U_m times n is the left singular matrix and it represents a rotation in the matrix space. The D_n times n is diagonal matrix and contains the singular values. This matrix may be indicated with different symbols such as Sigma_n times n. The D_n times n matrix in the geometrical space represents an act of stretching. Each singular value is the degree and/or weight of stretching. We use the notation D_n times n to remind ourselves that this is a diagonal matrix. Finally, V_n times n^T is called the right singular matrix and is associated with rotation. Overall, SVD geometrically is a combination of a rotation, a stretching, and a second rotation.","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"The two matrices U_m times n and V_n times n^T are very special due to their unitary properties.","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"\nU^T times U = U times U^T = I\nV^T times V = V times V^T = I\n","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"Therefore the general matrix expression of SVD is the following: ","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"X = UDV^T\n","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"To deal with the non-square matrices, we have to convert our X matrix to X^T times X. This implies that our SVD equation will become the following: ","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"X^TX = (UDV^T)^T times UDV^T\n","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"And after a little bit of linear algebra: ","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"X^TX = VD^T times DV^T  \nand \n\nXV = UD\n","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"This is a system of two equations with two variables that can be solved. Before looking at an example of such system let's remind ourselves that VD^T times DV^T is the solution of eigenvalue/eigenvector decomposition of X^TX. This means that both D and V^T can be calculated by calculating the eigenvalues and eigenvectors of X^TX. Therefore we can calculate D and V as follows:","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"\nD = sqrteigenvalues(X^TX) \nV = eigenvector(X^TX)\n","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"Once we know V, we can use that and the second equation of SVD to calculate the last part i.e. the matrix U. ","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"U = XVD^-1 \n","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"Please note that D^-1 denotes the inverse or pseudo-inverse of the matrix D.  ","category":"page"},{"location":"svd/#Practical-Example","page":"SVD","title":"Practical Example","text":"","category":"section"},{"location":"svd/","page":"SVD","title":"SVD","text":"Let's do the SVD calculations together for the below matrix: ","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"using AdvChemStat\n\nX = [5 -5;-1 7;1 10]\n","category":"page"},{"location":"svd/#Step-1:-X{T}X","page":"SVD","title":"Step 1: X^TX","text":"","category":"section"},{"location":"svd/","page":"SVD","title":"SVD","text":"# The function transpose(-) is part of LinearAlgebra.jl package that has been automatically installed via ACS.jl package.\n# Not all the functions of LinearAlgebra.jl are exported within the ACS.jl environment. \nXtX = transpose(X)*X \n","category":"page"},{"location":"svd/#Step-2:-Calculation-of-*D*,-*V*,-and-*U*","page":"SVD","title":"Step 2: Calculation of D, V, and U","text":"","category":"section"},{"location":"svd/","page":"SVD","title":"SVD","text":"\nD = diagm(sqrt.(eigvals(XtX))) # A diagonal matrix is generated\n","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"\nV = eigvecs(XtX) # Right singular matrix\n\n","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"\nU = X*V*pinv(D)\t# Left singular matrix\n\n","category":"page"},{"location":"svd/#Builtin-Function","page":"SVD","title":"Builtin Function","text":"","category":"section"},{"location":"svd/","page":"SVD","title":"SVD","text":"The same calculations can be done with the function svd(-) of ACS package provided via LinearAlgebra.jl package. ","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"\n out = svd(X)\n","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"\n D = diagm(out.S) # The singular value matrix\n","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"\n U = out.U # Left singular matrix\n","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"\n V = transpose(out.Vt) # Right singular matrix\n","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"Please note that the builtin function sorts the singular values in descending order and consequently the other two matrices are also sorted following the same. Additionally, for ease of calculations the builtin function generates the mirror image of the U and V matrices. These differences essentially do not impact your calculations at all, as long as they are limited to what is listed above.","category":"page"},{"location":"svd/#Step-3-Calculation-of-\\hat{X}","page":"SVD","title":"Step 3 Calculation of hatX","text":"","category":"section"},{"location":"svd/","page":"SVD","title":"SVD","text":"Using both the manual method and the builtin function, you can calculate hatX following the below operation. ","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"\nX_hat = U*D*transpose(V)\n","category":"page"},{"location":"svd/#Applications","page":"SVD","title":"Applications","text":"","category":"section"},{"location":"svd/","page":"SVD","title":"SVD","text":"As mentioned above SVD has several applications in different fields. Here we will focus on three, namely: dimension reduction, clustering/trend analysis, and multivariate regression. This dataset contains five variables (i.e. columns) and 150 measurements (i.e. rows). The last variable \"Species\" is a categorical variable which defines the flower species. ","category":"page"},{"location":"svd/#Dimension-Reduction","page":"SVD","title":"Dimension Reduction","text":"","category":"section"},{"location":"svd/","page":"SVD","title":"SVD","text":"To show case the power of SVD in dimension reduction we will use the Iris dataset from Rdatasets. ","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"using AdvChemStat\n\ndata = dataset(\"datasets\", \"iris\")\ndescribe(data) # Summarizes the dataset\n","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"Here we show how SVD is used for dimension reduction with the iris dataset. First we need to convert the dataset from table (i.e. dataframe) to a matrix. For data we can use the function Matrix(-) builtin in the julia core language.","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"Y = data[!,\"Species\"]\nX = Matrix(data[:,1:4]); # The first four columns are selected for this\n","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"Now we can perform SVD on the X and try to assess the underlying trends in the data. ","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"\n out = svd(X)\n","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"\n D = diagm(out.S) # The singular value matrix\n","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"\n U = out.U # Left singular matrix\n","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"\n V = transpose(out.Vt) # Right singular matrix\n","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"As you may have noticed, there are four variables in the original data and four non-zero singular values. Each column in the lift singular matrix is associated with one singular value and one row in the V matrix. For example the first column of sorted U matrix (i.e. via the builtin function) is directly connected to the first singular value of 95.9 and the first row of the matrix V. With all four singular values we can describe 100% of variance in the data (i.e. hatX = X). By removing the smaller or less important singular values we can reduce the number of dimensions in the data. We can calculate the variance explained by each singular value via two different approaches. ","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"\n var_exp = diag(D) ./ sum(D) # diag() selects the diagonal values in a matrix \n\n","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"\n var_exp_cum = cumsum(diag(D)) ./ sum(D) # cumsum() calculates the cumulative sum \n\n","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"\n scatter(1:length(var_exp),var_exp,label=\"Individual\")\n plot!(1:length(var_exp),var_exp,label=false)\n\n scatter!(1:length(var_exp),var_exp_cum,label=\"Cumulative\")\n plot!(1:length(var_exp),var_exp_cum,label=false)\n xlabel!(\"Nr Singular Values\")\n ylabel!(\"Variance Explained\")\n\n","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"Given that the first two singular values explain more than 95% variance in the data, they are considered enough for modeling our dataset. The next step here is to first plot the scores (i.e. the left singular matrix) of first and second singular values against each other to see whether we have a model or not. Each column in the U matrix represents a set of scores associated with a singular value (e.g. first column for the first singular value).","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"\n scatter(U[:,1],U[:,2],label=false)\n xlabel!(\"First Singular value (81%)\")\n ylabel!(\"Second Singular value (15%)\")\n \n","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"At this point we are assuming that we do not have any idea about the plant species included in our dataset. Now we need to connect the singular values to individual variables. For that similarly to PCA we will take advantage of the loadings, which in this case are the columns of the V or the rows of V^T. ","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"\n bar(V[:,1] ./ sum(abs.(V)),label=\"First SV\")\n bar!(V[:,2] ./ sum(abs.(V)),label=\"Second SV\")\n xlabel!(\"Variable Nr\")\n ylabel!(\"Importance\")\n #ylims!(-0.1,0.1)\n\n \n","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"The sign of each loading value shows the relationship between the variable and the model. For example, based on the first SV the variable number one and two both have a negative impact on the final model (i.e. scores of the SV1). A positive impact indicates an increase of the final model scores with the variable while a negative impact means a decrease in the score values with an increase the variable. ","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"\n p1 = scatter(X[:,1],U[:,1],label=false)\n xlabel!(\"SepalLength\")\n ylabel!(\"Scores U1\")\n\n  p2 = scatter(X[:,2],U[:,1],label=false)\n xlabel!(\"SepalWidth\")\n ylabel!(\"Scores U1\")\n\n  p3 = scatter(X[:,2],U[:,2],label=false)\n xlabel!(\"SepalWidth\")\n ylabel!(\"Scores U2\")\n\n p4 = scatter(X[:,3],U[:,2],label=false)\n xlabel!(\"PetalLength\")\n ylabel!(\"Scores U2\")\n\n plot(p1,p2,p3,p4,layout = (2,2))\n \n","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"In this particular case, the SV1 is a linear combination of SepalLength and SepalWidth while the SV2 is a linear combination of all four variables. This implies that we can cover the variance present in the X with two variables, which are U1 and U2. For this dataset, we have a reduction of variables from 4 to 2, which may not look impressive. However, this can be a very useful technique when dealing with a large number of variables (the octane example).","category":"page"},{"location":"svd/#Clustering","page":"SVD","title":"Clustering","text":"","category":"section"},{"location":"svd/","page":"SVD","title":"SVD","text":"When we perform cluster analysis or most modeling approaches, we need to divide our data into training and test sets. We usually go for a division of 80% for training set and 20% for the test. More details are provided in the cross-validation chapter. Let's randomly select 15 data points to put aside as the test set. ","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"\nn = 15 # number of points to be selected\n\nrand_ind = rand(1:size(X,1),n) # generate a set of random numbers between 1 and size(X,1)\nind_tr = ones(size(X,1))       # generate a matrix of indices \nind_tr[rand_ind] .= 0          # set the test set values' indices to zero \nX_tr = X[ind_tr .== 1,:]       # select the training set\nX_ts = X[rand_ind,:]           # select the test set\ndata[rand_ind,:]\n\n","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"Now that we have training and test sets separated, we can build our model using the training set. This implies that the model has never seen the values in the test set. It should be noted that we always want the homogenous distribution of measurements in the test set. Also, each iteration here will result in a different test set as a new set of random numbers are generated.  Now let's build our model with only the X_tr following the same procedure as before. ","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"\n out = svd(X_tr)\n","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"\n D = diagm(out.S) # The singular value matrix\n","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"\n U = out.U # Left singular matrix\n","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"\n V = transpose(out.Vt) # Right singular matrix\n","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"Let's plot our results for the first two SVs, as we did before. However, this time we will take the knowledge of the different species into account. ","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"\n var_exp = diag(D) ./ sum(D) # variance explained \n Y_tr = data[ind_tr .== 1,\"Species\"]\n Y_ts = data[ind_tr .== 0,\"Species\"]\n scatter(U[:,1],U[:,2],label=[\"Setosa\" \"Versicolor\" \"Virginica\"], group = Y_tr)\n xlabel!(\"First Singular value (81%)\")\n ylabel!(\"Second Singular value (14%)\")\n\n","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"As it can be seen, this model is very similar to our previous model based on the full dataset. Now we need to first define thresholds for each class based on the score values in the U1 and U2 space. This is typically more difficult to assess. However, for this case the main separating factor is the U2 values (e.g. U2 geq 005 = Setosa). ","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"\n scatter(U[:,1],U[:,2],label=[\"Setosa\" \"Versicolor\" \"Virginica\"], group = Y_tr)\n plot!([-0.15,0],[0.05,0.05],label=\"Setosa\")\n plot!([-0.15,0],[-0.04,-0.04],label=\"Virginica\")\n xlabel!(\"First Singular value (81%)\")\n ylabel!(\"Second Singular value (14%)\")\n\n","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"The next step is to calculate the score values for the measurements in the test set. This will enable us to estimate the class associated with each data point in the test set. To do this we need to do a little bit of linear algebra.","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"X = UDV^T\n\nU_test = X times (DV^T)^-1\n","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"In practice:","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"\n U_test = X_ts * pinv(D*transpose(V))\n\n","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"\n scatter(U[:,1],U[:,2],label=[\"Setosa\" \"Versicolor\" \"Virginica\"], group = Y_tr)\n plot!([-0.15,0],[0.05,0.05],label=\"Setosa\")\n plot!([-0.15,0],[-0.04,-0.04],label=\"Virginica\")\n scatter!(U_test[Y_ts[:] .== \"setosa\" ,1],U_test[Y_ts[:] .== \"setosa\",2],label=\"Setosa\",marker=:d)\n scatter!(U_test[Y_ts[:] .== \"versicolor\",1],U_test[Y_ts[:] .== \"versicolor\",2],label=\"Versicolor\",marker=:d)\n scatter!(U_test[Y_ts[:] .== \"virginica\",1],U_test[Y_ts[:] .== \"virginica\",2],label=\"Virginica\",marker=:d)\n xlabel!(\"First Singular value (81%)\")\n ylabel!(\"Second Singular value (14%)\")\n\n","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"As it can be seen from the results of the test set, our model is not prefect but it does well for most cases. It should be noted that steps such as data pre-treatment and the use of supervised methods may improve the results of your cluster analysis. The use of SVD for prediction is not recommended. It must be mainly used for the dimension reduction and data exploration.  ","category":"page"},{"location":"svd/#Regression","page":"SVD","title":"Regression","text":"","category":"section"},{"location":"svd/","page":"SVD","title":"SVD","text":"If you have a dataset (e.g. octane dataset in the additional example), where the SVD is used to reduce the dimensions of the dataset. In this case the we can perform a least square regression using the selected columns of U rather than the original X. For example in case of iris dataset the U1 and U2 can be used to replace X.  ","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":" X_svr = U[:,1:m] # m is the number of selected SVs \n Y_svr            # does not exist for iris dataset. for the octane dataset is the octane column\n b = pinv(transpose(X_svr) * X_svr) * transpose(X_svr) * Y_svr # simple least square solution\n y_hat = X_svr * b # prediction the y_hat ","category":"page"},{"location":"svd/#Trend-Analysis","page":"SVD","title":"Trend Analysis","text":"","category":"section"},{"location":"svd/","page":"SVD","title":"SVD","text":"We also can assess the trend represented by each SV in our model. This is typically done by setting all SV values except one to zero. Then the new D is used to predict hatX. Then different variables are plotted against each other for both X matrices. ","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":" D_temp = out.S\n D_temp[2:end] .= 0\n D_n = diagm(D_temp) # the new singular value matrix\n","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"Then the hatX is calculated.","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":" X_h  = U * D_n * transpose(V)\n X_h[1:5,:]\n","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"Now if we plot the SepalLength vs SepalWidth we can clearly see a clear 1 to 2 relationship between the two variables which is being detected by the first SV. This can be done for other variables and SVs. ","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"\n scatter(X[:,1],X[:,2],label=\"X\")\n scatter!(X_h[:,1],X_h[:,2],label=\"X_h\")\n xlabel!(\"SepalLength\")\n ylabel!(\"SepalWidth\")\n\n","category":"page"},{"location":"svd/#Additional-Example","page":"SVD","title":"Additional Example","text":"","category":"section"},{"location":"svd/","page":"SVD","title":"SVD","text":"If you are interested in practicing more, you can use the NIR.csv file provided in the folder dataset of the package ACS.jl github repository. Please note that this is an SVR problem, where you can first use SVD for the dimension reduction and then use the selected SVs for the regression. ","category":"page"},{"location":"svd/","page":"SVD","title":"SVD","text":"If you are interested in math behind SVD and would like to know more you can check this MIT course material.  ","category":"page"},{"location":"#[Advanced-Chemometrics-and-Statistics-(AdvChemStat)](https://coursecatalogue.uva.nl/xmlpages/page/2022-2023-en/search-course/course/99444)","page":"Home","title":"Advanced Chemometrics and Statistics (AdvChemStat)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A documentation built for the AdvChemStat course to help the students during the lectures and for exam preparation ","category":"page"},{"location":"#Course-content","page":"Home","title":"Course content","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This course is built for MSc of Analytical (Chemistry) Sciences at the University of Amsterdam (UvA). In this course, the students learn how to handle/model multi-dimensional data from simple visualization to machine learning based modeling and inference. The course contains 11 lectures from which 8 of them are tackling independent topics while the remaining are more generic. For 6 out of those 8, separate pages are created within this documentation. In future more topics will be added to the package and thus the documentation. This package utilizes wide range of other packages developed by others, as this is meant to facilitate the introduction of the students to programming and data science. The package is based on julia language. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Introduction to julia and Jupyter notebook\nSingular value decomposition (SVD)\nMCR-ALS\nPartial least square regression (PLS-R)\nHierarchical Cluster Analysis (HCA)\nK-means clustering \nDecision trees and random forest \nAdvanced signal processing \nValidation and cross-validation \nBayesian statistics I \nBayesian statistics II","category":"page"},{"location":"","page":"Home","title":"Home","text":"For more information about the course and us, please visit us at https://emcms.info. ","category":"page"}]
}
